{{- if .Values.ingress.enabled -}}
---
{{- if .Capabilities.APIVersions.Has "networking.k8s.io/v1/Ingress" }}
apiVersion: networking.k8s.io/v1
{{- else }}
apiVersion: networking.k8s.io/v1beta1
{{- end }}
kind: Ingress
metadata:
  name: invenio-ingress
  annotations:
    {{- if .Values.ingress.class }}
    kubernetes.io/ingress.class: {{ .Values.ingress.class }}
    {{- end }}
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-request-buffering: "off"
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/client-body-buffer-size: "8m"
    nginx.ingress.kubernetes.io/proxy-buffer-size: "8m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "240"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "240"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      send_timeout 240s;
      client_body_timeout 240s;
spec:
  tls:
  - hosts:
    - "{{ .Values.host }}"
    secretName: {{ .Values.ingress.sslSecretName }}
  rules:
  - host: "{{ .Values.host }}"
    http:
      paths:
        - path: ""
          backend:
            serviceName: {{ if .Values.haproxy.inside_cluster }}haproxy{{ else }}web{{ end }}
            servicePort: http
{{- end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web
spec:
  selector:
    matchLabels:
      app: web
  replicas: {{ .Values.web.replicas }}
  template:
    metadata:
      labels:
        app: web
    spec:
      containers:
      - name: web
        image: {{ .Values.web.image }}
        imagePullPolicy: IfNotPresent
        command: [
          "/bin/bash",
          "-c",
          "cp -R {{ .Values.web.assets.location }}/. /opt/nginx-invenio-assets/ &&
          uwsgi --ini /opt/invenio/src/uwsgi/uwsgi.ini",
        ]
        envFrom:
          - configMapRef:
              name: invenio-config
        env:
          - name: TZ
            value: "Europe/Zurich"
          - name: INVENIO_BROKER_URL
            valueFrom:
              secretKeyRef:
                name: {{ include "rabbitmq.secret_name" . }}
                key: CELERY_BROKER_URL
          - name: INVENIO_CELERY_BROKER_URL
            valueFrom:
              secretKeyRef:
                name: {{ include "rabbitmq.secret_name" . }}
                key: CELERY_BROKER_URL
          - name: INVENIO_SQLALCHEMY_DATABASE_URI
            valueFrom:
              secretKeyRef:
                name: {{ include "postgresql.secret_name" . }}
                key: SQLALCHEMY_DB_URI
          - name: INVENIO_SECRET_KEY
            valueFrom:
              secretKeyRef:
                name: invenio-secrets
                key: INVENIO_SECRET_KEY
          {{- if not .Values.elasticsearch.inside_cluster }}
          - name: INVENIO_SEARCH_ELASTIC_HOSTS
            valueFrom:
              secretKeyRef:
                name: {{ include "elasticsearch.secret_name" . }}
                key: INVENIO_SEARCH_ELASTIC_HOSTS
          {{- end }}
        readinessProbe:
          exec:
            command:
              - /bin/bash
              - -c
              - "uwsgi_curl $(hostname):5000 /ping -H 'Host: {{ .Values.host }}'"
          failureThreshold: 3
          initialDelaySeconds: 15
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        livenessProbe:
          exec:
            command:
              - /bin/bash
              - -c
              - "uwsgi_curl $(hostname):5000 /ping -H 'Host: {{ .Values.host }}'"
          failureThreshold: 1
          initialDelaySeconds: 15
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        volumeMounts:
          - name: uwsgi-config
            mountPath: '/opt/invenio/src/uwsgi'
          - name: nginx-invenio-assets
            mountPath: /opt/nginx-invenio-assets
        resources:
          requests:
            memory: 200Mi
          limits:
            memory: 1Gi
      - name: nginx
        image: nginx
        env:
        - name: TZ
          value: "Europe/Zurich"
        ports:
        - containerPort: 8080
          protocol: TCP
        volumeMounts:
          - name: nginx-config
            mountPath: /etc/nginx/conf.d
          - name: var-run
            mountPath: /var/run
          - name: var-cache-nginx
            mountPath: /var/cache/nginx
          - name: var-log-nginx
            mountPath: /var/log/nginx
          - name: nginx-invenio-assets
            mountPath: {{ .Values.nginx.assets.location | quote }}
            readOnly: true
        readinessProbe:
          httpGet:
            path: /ping
            port: 8080
          initialDelaySeconds: 15
          timeoutSeconds: 1
      {{ if .Values.logstash.enabled }}
      - name: filebeat
        image: {{ .Values.logstash.filebeat_image }}
        args: [
          "-c", "/etc/filebeat.yml",
          "-e",
        ]
        resources:
          limits:
            memory: 200Mi
          requests:
            cpu: 100m
            memory: 100Mi
        volumeMounts:
        - name: config
          mountPath: /etc/filebeat.yml
          readOnly: true
          subPath: filebeat.yml
        - name: var-log-nginx
          mountPath: /var/log/nginx
          readOnly: true
      {{ end }}
      volumes:
        {{ if .Values.logstash.enabled }}
        - name: config
          configMap:
            defaultMode: 0600
            name: filebeat-config
        {{ end }}
        - name: nginx-config
          configMap:
            name: nginx-config
        - name: var-run
          emptyDir: {}
        - name: var-cache-nginx
          emptyDir: {}
        - name: var-log-nginx
          emptyDir: {}
        - name: uwsgi-config
          configMap:
            defaultMode: 420
            name: uwsgi-config
        - name: nginx-invenio-assets
          emptyDir: {}
      imagePullSecrets:
        - name: {{ .Values.web.imagePullSecret }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: worker
spec:
  replicas: {{ .Values.worker.replicas }}
  selector:
    matchLabels:
      app: worker
  template:
    metadata:
      labels:
        app: worker
    spec:
      containers:
      - name: worker
        image: {{ .Values.worker.image }}
        command: [
          "/bin/bash",
          "-c",
          "celery -A {{ .Values.worker.app }} worker -c {{ .Values.worker.concurrency }} -l {{ .Values.worker.log_level }}"
        ]
        envFrom:
          - configMapRef:
              name: invenio-config
        env:
          - name: TZ
            value: "Europe/Zurich"
          - name: INVENIO_BROKER_URL
            valueFrom:
              secretKeyRef:
                name: {{ include "rabbitmq.secret_name" . }}
                key: CELERY_BROKER_URL
          - name: INVENIO_CELERY_BROKER_URL
            valueFrom:
              secretKeyRef:
                name: {{ include "rabbitmq.secret_name" . }}
                key: CELERY_BROKER_URL
          - name: INVENIO_SQLALCHEMY_DATABASE_URI
            valueFrom:
              secretKeyRef:
                name: {{ include "postgresql.secret_name" . }}
                key: SQLALCHEMY_DB_URI
          - name: INVENIO_SECRET_KEY
            valueFrom:
              secretKeyRef:
                name: invenio-secrets
                key: INVENIO_SECRET_KEY
          {{ if not .Values.elasticsearch.inside_cluster }}
          - name: INVENIO_SEARCH_ELASTIC_HOSTS
            valueFrom:
              secretKeyRef:
                name: {{  include "elasticsearch.secret_name" . }}
                key: INVENIO_SEARCH_ELASTIC_HOSTS
          {{ end }}
        resources:
          requests:
            memory: 2Gi
          limits:
            memory: 2Gi
      imagePullSecrets:
        - name: {{ .Values.worker.imagePullSecret }}
{{- if .Values.web.autoscaler.enabled -}}
---
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  labels:
    app: web
    template: invenio-application
  name: web
spec:
  maxReplicas: {{ .Values.web.autoscaler.max_web_replicas }}
  minReplicas: {{ .Values.web.autoscaler.min_web_replicas }}
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: web
  targetCPUUtilizationPercentage: {{ .Values.web.autoscaler.scaler_cpu_utilization }}
{{- end }}
