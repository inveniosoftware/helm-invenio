---
apiVersion: v1
kind: ConfigMap
metadata:
  name: haproxy-config
data:
  haproxy.cfg: |
    global
      quiet

    defaults
      mode http
      maxconn 3000

      stats enable
      stats uri /stats
      stats hide-version

      timeout  http-request 10s
      timeout  queue 2m
      timeout  connect 10s
      timeout  client 2m
      timeout  server 2m
      timeout  http-keep-alive 10s
      timeout  check 10s

    frontend public
      bind *:8080
      default_backend apps

    backend apps
      server web web:80 check maxconn {{ .Values.haproxy.maxconn }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
data:
  invenio.conf: |
    upstream web {
        server 127.0.0.1:5000 max_conns={{ .Values.nginx.max_conns }};
    }
    log_format trace '$remote_addr - $time_iso8601 "$request" '
        '$status  $body_bytes_sent $request_length "$http_referer"  '
        '"$http_user_agent" "$http_x_forwarded_for" rid=$request_id '
        'rt=$request_time uct="$upstream_connect_time" '
        'uht="$upstream_header_time" urt="$upstream_response_time" '
        'sid=$upstream_http_x_session_id uid=$upstream_http_x_user_id';

    access_log  /var/log/nginx/access.log  trace;

    server {
        listen 8080;
        server_name localhost;
        charset utf-8;

        location /ping {
            access_log off;
            return 200 "ok\n";
        }

        location / {
            include uwsgi_params;
            uwsgi_pass web;
            uwsgi_param X-Real-IP $remote_addr;
            # Sets buffering off since it creates download problems
            # when clients are slow to consume the buffer which uwsgi
            # creates by default (1GB). As a result uwsgi times out
            # by the time the client consumed the buffer.
            uwsgi_buffering off;
            uwsgi_request_buffering off;
            uwsgi_param Host $host;
            uwsgi_param X-Forwarded-For $proxy_add_x_forwarded_for;
            uwsgi_param X-Forwarded-Proto $http_x_forwarded_proto;
            uwsgi_ignore_headers Set-Cookie;
        }
        location /static {
          alias "{{ .Values.nginx.assets.location }}";
          autoindex off;
        }
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: uwsgi-config
data:
  uwsgi.ini: |
    [uwsgi]
    stats = 0.0.0.0:9000
    socket = 0.0.0.0:5000
    module = invenio_app.wsgi:application
    master = true
    processes = {{ .Values.web.uwsgi.processes }}
    threads = {{ .Values.web.uwsgi.threads }}
    single-interpreter = true
    need-app = true
    disable-logging = true
    log-4xx = true
    log-5xx = true
    auto-procname = true
    buffer-size =  10240
    post-buffering = true
    lazy-apps = true
    # thunder-lock = true # https://marc.info/?l=uwsgi&m=140473636200986&w=2
                          # https://uwsgi-docs.readthedocs.io/en/latest/articles/SerializingAccept.html

    # Workers management
    max-requests = 1999
    max-requests-delta = 149
    # max-worker-lifetime = 3600 # https://github.com/unbit/uwsgi/issues/1894
    reload-on-rss = 250

    # fix up signal handling
    die-on-term: true
    hook-master-start: unix_signal:2 gracefully_kill_them_all
    hook-master-start: unix_signal:15 gracefully_kill_them_all
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: invenio-config
data:

  INVENIO_ACCOUNTS_SESSION_REDIS_URL: 'redis://cache:6379/1'
  INVENIO_APP_ALLOWED_HOSTS: '[''{{ .Values.host }}'']'
  INVENIO_SITE_UI_URL: '{{ .Values.host }}'
  INVENIO_SITE_API_URL: '{{ .Values.host }}/api' 
  INVENIO_CACHE_REDIS_HOST: 'cache'
  INVENIO_CACHE_REDIS_URL: 'redis://cache:6379/0'
  INVENIO_CELERY_RESULT_BACKEND: 'redis://cache:6379/2'
  INVENIO_COLLECT_STORAGE: flask_collect.storage.file
  INVENIO_RATELIMIT_STORAGE_URL: 'redis://cache:6379/3'
  {{ if .Values.elasticsearch.inside_cluster }}
  INVENIO_SEARCH_ELASTIC_HOSTS: "[{'host': 'es'}]"
  {{ end }}
{{ if .Values.logstash.enabled }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: filebeat-config
data:
  filebeat.yml: |-
    filebeat.inputs:
    - type: log
      paths:
        - /var/log/nginx/*access*.log
      fields:
        nginx: true
    - type: log
      paths:
        - /var/log/uwsgi/*.log
      fields:
        uwsgi: true
    output.logstash:
      hosts: ["logstash:5044"]
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: logstash-configmap
data:
  logstash.yml: |
    http.host: "0.0.0.0"
    path.config: /usr/share/logstash/pipeline
  logstash.conf: |
    # all input will come from filebeat, no local logs
    input {
      beats {
        port => 5044
      }
    }
    filter {
      mutate {
         add_field => { "_environment" => "${ENVIRONMENT}"}
         }

      # Use grok to parse the input string into an object.
      grok {
          match => {
              "message" => "%{IP:client_ip} - %{TIMESTAMP_ISO8601:request_timestamp} \"%{WORD:http_method} %{PATH:url}(?:\?%{NOTSPACE:query_string}|) %{NOTSPACE:http_protocol}\" %{INT:http_code}  %{INT:bytes} %{INT:bytes_received} \"%{DATA:referer}\"  \"%{DATA:user_agent}\" \"%{DATA:http_x_forwarded_for}\" rid=%{WORD:request_id} rt=%{BASE16FLOAT:request_time} uct=\"%{DATA:connect_time}\" uht=\"%{DATA:upstream_header_time}\" urt=\"%{DATA:upstream_response_time}\" sid=%{NOTSPACE:session_id} uid=%{NOTSPACE:user_id}"
          }
        }
        if ![data][query_string]{
          mutate { replace => { query_string => "-" } }
        }

        # If request is a ping, then ignore it.
        
        if [data][url] != "ping" {
    
          if [data][upstream_header_time] == "-"{
            mutate { replace => { upstream_header_time => 0 }}
          }

          if [data][connect_time] == "-"{
            mutate { replace => { connect_time => 0 }}
          }

          if [data][upstream_response_time] == "-"{
            mutate { replace => { upstream_response_time => 0 }}
          }
          # Enrich with geolocation data.
          geoip {
              source => "http_x_forwarded_for" #field name that contains the ip address
              fields => [ "city_name", "country_name", "country_code2", "continent_code"]
              target => "data"
              # Download static database and point to it
          }

        useragent {
            source => "[data][user_agent]"
            target => "[@metadata]"
        }
        ##############################################################
        # USER AGENT
        ##############################################################
        # add ua/device only if set
        if [@metadata][ua_device] {
              mutate {
                  add_field => { "[data][ua/device]" => "%{[@metadata][ua_device]}" }
              }
          }
        # add ua/family only if set
        if [@metadata][ua_name] {
            mutate {
                add_field => { "[data][ua/family]" => "%{[@metadata][ua_name]}" }
            }
        }
        # add ua/patch only if set
        if [@metadata][ua_patch] {
            mutate {
                add_field => { "[data][ua/full]" => "%{[@metadata][ua_name]}/%{[@metadata][ua_major]}.%{[@metadata][ua_minor]}.%{[@metadata][ua_patch]}" }
            }
        } else {
            mutate {
                add_field => { "[data][ua/full]" => "%{[@metadata][ua_name]}/%{[@metadata][ua_major]}.%{[@metadata][ua_minor]}" }
            }
        }
        # add ua/os only if set
        if [@metadata][ua_os] {
            mutate {
                add_field => { "[data][ua/os]" => "%{[@metadata][ua_os]}" }
            }
        }
      }
    }
    output {
      if [data][url] != "ping"{
        stdout {}
        }
    } 
{{ end }}
